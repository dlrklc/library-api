#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');  // Import the main application
var debug = require('debug')('library-api:server');
var http = require('http');

const sequelize = require('../config/database');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');  // Define the port (defaults to 3000)
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);  // Create a new HTTP server using the Express app

/**
 * Listen on provided port
 */

server.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

sequelize.authenticate()
  .then(() => {
    console.log('Connection has been established successfully.');
    sequelize.sync()
      .then(() => {
        console.log('Database synced!');
      })
      .catch(err => {
        console.error('Error syncing database:', err);
      });
  })
  .catch((err) => {
    console.error('Unable to connect to the database:', err);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // Named pipe
    return val;
  }
  if (port >= 0) {
    // Port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
